/*
 * Copyright 2021, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

plugins {
    id 'io.spine.tools.gradle.bootstrap' version '1.7.0' apply false
    id 'net.ltgt.errorprone' version '1.3.0' apply false
}

final def scripts = [
        version       : "$rootDir/version.gradle",
        jacoco        : "$rootDir/gradle/jacoco.gradle",
        staticAnalysis: "$rootDir/gradle/static-analysis.gradle"
]

allprojects {
    apply plugin: 'io.spine.tools.gradle.bootstrap'
    apply plugin: 'idea'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'pmd'
    apply plugin: 'jacoco'
    apply from: "$scripts.version"

    spine.enableJava()

    ext {
        final def gradlePlugins = [
                errorProne   : "net.ltgt.gradle:gradle-errorprone-plugin:$deps.versions.errorPronePlugin",
                protobuf     : "com.google.protobuf:protobuf-gradle-plugin:$deps.versions.protobufPlugin",
                appengine    : "com.google.cloud.tools:appengine-gradle-plugin:$deps.versions.appenginePlugin",
                licenseReport: "com.github.jk1:gradle-license-report:$deps.versions.licensePlugin"
        ]

        run = [
                "scripts"      : scripts,
                "gradlePlugins": gradlePlugins
        ]
    }
}

subprojects {
    apply from: "$rootDir/version.gradle"
    dependencies {
        errorprone "com.google.errorprone:error_prone_core:$deps.versions.errorProne"
        errorproneJavac "com.google.errorprone:javac:$deps.versions.errorProneJavac"
        implementation("com.google.guava:guava:$deps.versions.guava")
        implementation("javax.annotation:javax.annotation-api:$deps.versions.javaxAnnotations")
        compileOnly("org.checkerframework:checker-qual:$deps.versions.checkerFramework")
        runtimeOnly deps.grpc.grpcNetty
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$deps.versions.junit5"
    }

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
        }
    }

    spine {
        forceDependencies = true
    }

    apply plugin: 'net.ltgt.errorprone'
    apply from: run.scripts.staticAnalysis
}

ext {
    isTravis = System.env.TRAVIS == 'true'
}

if (isTravis) {
    // To limit the memory usage when running in Travis.
    // Travis tend to kill tasks that use too much memory.
    allprojects {
        tasks.withType(GroovyCompile) {
            groovyOptions.fork = false
        }
        tasks.withType(Test) {
            // containers (currently) have 2 dedicated cores and 4GB of memory
            maxParallelForks = 2
            minHeapSize = '128m'
        }
    }
    // Travis kills the test if it has seen no output for 10 minutes, so we need to produce output.
    test {
        testLogging {
            showStandardStreams = true
        }
    }
}

apply from: run.scripts.jacoco
